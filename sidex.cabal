cabal-version:      2.4
name:               sidex
version:            0.1.0.0

-- A short (one-line) description of the package.
-- synopsis:

-- A longer description of the package.
-- description:

-- A URL where users can report bugs.
-- bug-reports:

license: Apache-2.0
license-files: LICENSE
author:             Your name
maintainer:         Your email

-- A copyright notice.
-- copyright:
-- category:
-- extra-source-files: CHANGELOG.md

flag defer-plugin-errors
    description:
        Defer errors from the plugin, useful for things like Haddock that can't handle it.
    default: False
    manual: True

common lang
    default-language:   Haskell2010
    ghc-options:
      -Wall -Wnoncanonical-monad-instances
      -Wincomplete-uni-patterns -Wincomplete-record-updates
      -Wredundant-constraints -Widentities -rtsopts
      -- See Plutus Tx readme
      -fobject-code -fno-ignore-interface-pragmas -fno-omit-interface-pragmas
    if flag(defer-plugin-errors)
        ghc-options: -fplugin-opt PlutusTx.Plugin:defer-errors

library
    import: lang
    exposed-modules:
      Sidex
    build-depends:
      base >= 4.9 && < 5,
      aeson,
      bytestring,
      containers,
      freer-extras,
      playground-common,
      plutus-contract,
      plutus-tx-plugin,
      plutus-tx,
      plutus-ledger,
      aeson,
      cardano-api,
      data-default,
      plutus-ledger-api,
      plutus-ledger-constraints,
      serialise,
      text
    hs-source-dirs: src

import           Control.Monad        hiding (fmap)
import           Data.Aeson           (ToJSON, FromJSON)
import           Data.Map             as Map
import           Data.Text            (Text)
import           Data.Void            (Void)
import           GHC.Generics         (Generic)
import           Plutus.Contract
import           PlutusTx             (Data (..))
import qualified PlutusTx
import           PlutusTx.Prelude     hiding (Semigroup(..), unless)
import           Ledger               hiding (singleton)
import           Ledger.Constraints   (TxConstraints)
import qualified Ledger.Constraints   as Constraints
import qualified Ledger.Typed.Scripts as Scripts
import           Ledger.Ada           as Ada
import           Playground.Contract  (printJson, printSchemas, ensureKnownCurrencies, stage, ToSchema)
import           Playground.TH        (mkKnownCurrencies, mkSchemaDefinitions)
import           Playground.Types     (KnownCurrency (..))
import           Prelude              (IO, Semigroup (..), Show (..), String)
import           Text.Printf          (printf)